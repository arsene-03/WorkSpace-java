package ex04;

public class Main04 {

	public static void main(String[] args) {
		A1 a1 = new A1(); // 일반적인 인스턴스 생성
		a1.a1();
		
		A a2 =new A1(); // 참조 타입을 인터페이스로 (A)선언 가능
						//인스턴스는 인터페이스를 구현한 클래스로만
		a2.a1();		//인터페이스는 a1 메서드의 존재를 알고 있다
						//구현 인스턴스 내부의 a1메서드 실행 가능
		
		C1 c1 =new C1(); //다중 구현 클래스(C) 타입과 인스턴스
		c1.a1();		// 다중 구현 클래스이므로 a1 b1메서드의 존재를 알고 있다 => 실행가능
		c1.b1();
		
		A ca = new C1(); // 다중구현 클래스로 만든 인스턴스, 참조타입은 하나의 인터페이스
		ca.a1();		// 참조타입으로 지정된 인터페이스(A)가 알고 있는 메서드 => 실행가능
//		ca.b1();		// 참조타입으로 지정된 인터페이스(A) 가 모르는 메서드 => 실행 불가능
		
		
		B cb = new C1(); // 다중구현 클래스로 만든 인스턴스, 참조타입은 하나의 인터페이스
//		cb.a1();		// 참조타입으로 지정된 인터페이스(B) 가 모르는 메서드 => 실행 불가능
		cb.b1();		//참조타입으로 지정된 인터페이스(B)가 알고 있는 메서드 => 실행가능
		
		//------------------------------------------------------------------
		
		A da = new D1(); //상속한 부모 인터페이스를 참조타입(A), 상속받은 자식 인터페이스를 구성한 인스턴스(new D1)
		da.a1();	//참조타입이(A) 알고 있는 메서드 실행가능
//		da.b1();	//참조타입이(A) 가 모르는 메서드 실행 불가능
//		da.d1();	//참조타입이(A) 가 모르는 메서드 실행 불가능
		
		B db = new D1(); //상속한 부모 인터페이스를 참조타입(B), 상속받은 자식 인터페이스를 구성한 인스턴스(new D1)
//		db.a1();	//참조타입이(B) 가 모르는 메서드 실행 불가능
		db.b1();	//참조타입이(B) 알고 있는 메서드 실행가능
//		db.d1();	//참조타입이(B) 가 모르는 메서드 실행 불가능
		
		D dd = new D1(); //인터페이스를 구현한 인스턴스(new D1)와 인터페이스의 참조타입(D)
		dd.a1();	//참조타입이(D) 알고 있는 메서드 실행가능
		dd.b1();	//참조타입이(D) 알고 있는 메서드 실행가능
		dd.d1();	//참조타입이(D) 알고 있는 메서드 실행가능
		
		//------------------------------------------------------------------
		
		D d1 = new D1(); //인터페이스를 구현한 인스턴스(new D1)와 인터페이스의 참조타입(D)
		
		A a3 = d1;	//자식 인터페이스로 만든 인스턴스는 부모 인터페이스 참조타입 변수에 할당 가능
		a3.a1();
//		a3.b1();	//참조 타입이 모르는 메서드는 실행 불가능 (인스턴스 내부에는 메서드 존재)
//		a3.d1();
		
		B b3 = (B)a3; // A인터페이스와 B인터페이스는 관계가 없음
					// 실제 인스턴스는(new D1) A, B 모두 구현받은 인스턴스
					// 형변환 가능
//		b3.a1();
		b3.b1();
//		b3.d1();
		
		B b4 = null;
		if(a3 instanceof B) { // a3 변수 내부의 인스턴스가 참조타입 B로 사용이 가능한가?
			b4 = (B)a3; 	  // a3변수 내부의 인스턴스가 참조타입 B로 선언된 변수에 할당 가능
							  // 다만 사용가능한 메서드는 참조타입 B가 알고 있는 메서드로 제한
			
		}
		
		if(b4 == null) { //강제 형변환 실패
			System.out.println("b4는 빈 객체");
		}else {
			b4.b1(); // 형변환이 성공하면 b4에는 a3에 할당되었던 인스턴스 담겨잇음
		}
		
		methodA(new D1()); //부모 인터페페이스 구현한 인스턴스(new D1)를 매개값으로 전달가능
		methodB(new D1()); //부모 인터페이스로 구현한 인스턴스(new D1)를 매개값으로 전달가능
		methodD(new D1()); //인스턴스로 구현한 인스턴스(new D1)를 매개값으로 전달가능
	}

	private static void methodA(A a) { // A a = new D1();
		a.a1(); //부모인터페이스(A)(매개타입)는 자신이 알고 있는 메서드만 실행
//		a.b1();
//		a.d1();
		
	}
	private static void methodB(B b) {
//		b.a1();
		b.b1(); //부모인터페이스(B)(매개타입)는 자신이 알고 있는 메서드만 실행
//		b.d1();
		
	}
	private static void methodD(D d) {
		d.a1(); //자식 인터페이스(D)(매개타입 는 모든 모스드를 알고 있다
		d.b1();
		d.d1();
		
	}
}
